1.广义表是对线性表的扩展——线性表存储的所有的数据都是原子的（一个数或者不可分割的结构），且所有的数据类型相同。而广义表是允许线性表容纳自身结构的数据结构。

**广义表定义**：“（）”作为广义表开始和结束的标记，“，”作为原子或子表的分隔符

      广义表是由n(n>=0)个元素组成的有限序列：LS = （a1，a2, ... an）;其中 表中的结点ai是一个原子项（不可分的数据元素）或者是一个广义表（可再分）。n是广义表的长度。若ai是广义表，则称为LS的子表。

广义表的定义有递归的属性。***广义表的建立，求深度和复制都可以用递归的方法实现。***

***广义表是线性表的递归数据结构。***

**广义表的长度**： 若广义表不空，则广义表所包含的元素的个数，叫广义表的长度。（n=0时，为空表）

2.广义表 L = (((a,b),(c,d)),(e,(f,g),h),z)；那么L包含 广义表A=((a,b),(c,d)) , B=(e,(f,g),h)和原子z;依次类推,A也包含其它广义表.

3.将广义表的结构分为表头hp和表尾tp两部分。
**广义表表头和表尾**：若广义表LS不空，则第一个结点a1称为LS的表头，其余元素组成的子表称为表尾。

4.如L.hp = ((a,b),(c,d)); L.tp = (e,(f,g),h),z; 而L.tp明显也是一个表,所以L.tp.hp = (e,(f,g),h)； L.tp.tp = z；

5.**广义表的深度**： 广义表中括号的最大层数叫广义表的深度。*（原子的深度为0，空表的深度为1）*

***注意：如果广义表作为自身的一个元素，则称该广义表为递归表。递归的深度是无穷指，其长度是有限值。***

6.a,b在同一层; c,d在同一层； e，h在同一层； f，g在同一层。
  而各表尾，以及表尾的表尾在一层。如L.hp=（e,(f,g),h）,z和L.hp.hp=(z)在一层。而表头会到下一层




1.广义表是一种递归的数据结构，因此很难为每个广义表分配固定大小的存储空间，所以其存储结构只好采用动态链接结构。




1.广义表的特性。
（1）线性结构。广义表是一种线性结构，数据元素之间是线性关系，只不过元素不一定都是原子了，如果元素都是原子，那么这个广义表就是线性表。
（2）多层次结构，有深度。注意：**广义表是树的扩展。当限制表中成分不能共享和递归时，该广义树就是树，树中的叶子结点对应广义表中的原子，非叶结点对应子表**
（3）可共享：一个广义表可作为其他广义表的子表，多个广义表可共享一些广义表。
（4）可递归：广义表是一个递归表，当广义表中有共享或递归成分的子表时构成图结构，与有根，有序，有向图对应。

2.广义表的操作主要有：
（1）创建广义表
（2）判断广义表是否为空表
（3）遍历广义表
（4）求广义表长度和深度
（5）插入和删除数据元素
（6）查找指定原子所在结点
（7）比较广义表是否相等
（8）复制广义表等
public interface GenList<T> {
    boolean isEmpty(); //判断广义表是否为空
    int length(); //返回广义表长度
    int depth(); //返回广义表深度
    GenListNode<T> insert(int i,Object x); //插入原子x作为第i个元素 
    GenListNode<T> insert(int i,GenList<T> glist);//插入子表作为第i个元素
    void remove(int i); //删除第i个元素
｝