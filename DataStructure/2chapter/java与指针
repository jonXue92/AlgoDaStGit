1.Java中并没有显示的使用指针，而且也不允许编程的过程中使用指针，但实际上，一个对象的访问就是通过指针来实现的，一个对象会从实际的存储空间的某个位置开始占据一定的存储体。该对象的指针就是一个保存了对象的存储地址的变量，并且这个存储地址就是对象在存储空间中的起始地址。在许多高级语言中指针是一种数据类型，在Java中是使用对象的引用来替代的。

2.创建一个People类，有name（String），id（String）两种属性；

3.
People p = null;
People q = new People("Jack","0004");

这里创建了两个对于对象引用的变量p和q。变量p初始化为null，null是一个空指针，它不指向任何地方，也就是说它不指向任何类的对象，因此null可以复制给任何类的对象的引用。变量q是一个对于People类的实例引用，操作符new的作用实际上是为对象开辟足够的内存空间，而引用p是指向这一内存空间地址的指针。

4.
Peopel p1 = new People("David","0001");
People p2 = p1;
p2.setName("Denny");
System.out.println(p1.getName());
结果为
Denny

这段代码中对People类的对象p2的name成员变量进行了设置，值为Denny。但是这时就会发现，p1的成员变量name的值也变成了Denny。
原因就是p1和p2都是对对象的引用，在完成赋值语句People p2 = p1;后，p2和p1指向通一个存储空间，所以对于p2的修改也影响到了p1

5.
People p1 = new People("David","0002");
People p2 = new People("David","0002");
System.out.println(p1 == p2);
输出结果
false

在这里虽然p1与p2的所有成员变量的内容均相同，但是由于它们指向不同的存储空间，所以，输出语句输出结果为false。p1与p2的指向不同的存储空间

6.如果我们希望完成对象的拷贝，使用一个简单的赋值语句是无法完成的。如果我们希望判断两个对象引用是否一致是可以覆盖继承自Object类的equals方法来实现。




1.java中内存的分配方式有两种，一种是在堆(heap)内存，一种是在栈(stack)内存，所有new出来的对象都是在堆中分配的，函数中参数的传递是在栈中分配的。通常情况下堆的内存可以很大，比如32位操作系统中的虚拟内存都可以被堆所使用（当内存紧张的时候甚至硬盘都可以是堆的存储空间），而堆栈的内存分配是有限的。

2.栈则是存放一些数据基本类型的值，java中有几种基本类型如int,float,double,char,byte等，他们不是对象，除此之外一切都是对象，所有的对象都是在堆上分配的。

3.java中对象数组是什么，是句柄数组或者叫指针数组，里面保存的是每个元素的地址。java没有操作符重载和拷贝构造函数，因此当创建对象或者对已经创建的对象赋值时（注意是对象，不是基本类型）：Object a=new Object 和Object a=b（b是Object的子类型或者同类型）时，进行的是对象地址的传递并复制。这就是所说的句柄的传递和赋值。
  句柄里存储的就是对象的地址，句柄就是指针，只不过是你无法得到的地址,java就是通过这一点巧妙的将指针隐藏起来。当对象作为参数传递到方法中时，传递的就是对象的地址。
  
  
  
  
1.Java的引用是指向一个对象，引用本身也占用了内存。
2.java引用能做什么操作。
   a、指向一个对象，如Person p = new Person…
   java引用无法指向一个基本变量

   b、调用对象的方法，p.getAge();
   c、指向另外一个对象，Person p1 = new Person…; p = p1;
   
   无法获取java引用存的地址，不能delete
   
   
   

1.Java中有一些指针，当您传递一个对象时，您传递的指针指向该对象。该对象无法解除引用。如果使用其本机访问器设置其值，则它将更改，因为Java通过指针知道其内存位置。但指针是不可变的。当您尝试将指针设置为新位置时，您最终会得到一个与另一个名称相同的新本地对象。原始对象不变。




1.指针本质上可以在整个OS允许的内存块上任意移动，有时候还会跨界到其他内存块上去。本质上它离机器语言太近，能够造成非常巨大的外延性破坏。一个最经典的例子就是内存践踏造成的缓冲区溢出。Java否定了这种自由性。你不能根据你现有的引用移动到内存的其他位置做任何你想做的事情。这里面还有点历史渊源。当年里奇设计C语言的时候一个目标是足够简单，而且假定程序员足够聪明懂得良好设计程序，所以给予了那么自由的指针。到了Java发明的时候，程序设计界已经因为指针每年损失billion级别的资源，迫切需要一种新的编程机制。所以Java这种假定程序员很有可能犯错误的所谓健壮编程机制就出来了。就现在看来，在编写application的时候不允许使用指针是一个非常大的优点。




1.java指针被严格管理不能任意操作指针，只能通过指针访问对象，或者对指针之间赋值，这很好保证java对象不受意外破坏和保证了安全性，java称这种指针为引用，引用和指针本质上相同的。
2.a = new A();首先执行等号的右半边new A()，根据A定义的class模板创建了a对象，这个对象是A类型的，对象要占用了一定的内存空间，占空间多少与我们A类所写的代码内容有关。对象所占用的内存是一片连续的内存空间。
