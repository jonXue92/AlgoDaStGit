1.链表：
　　一种重要的数据结构，HashMap等集合的底层结构都是链表结构。链表以结点作为存储单元，这些存储单元可以是不连续的。每个结点由两部分组成：存储的数值+前序结点和后序结点的指针。即有前序结点的指针又有后序结点的指针的链表称为双向链表，只包含后续指针的链表为单链表。
  
2.Java中单链表采用Node实体类类标识，其中data为存储的数据，next为下一个节点的指针




1.head为头节点，他不存放任何的数据，只是充当一个指向链表中真正存放数据的第一个节点的作用，而每个节点中都有一个next引用，指向下一个节点，就这样一节一节往下面记录，直到最后一个节点，其中的next指向null。

2.单链表是链表中结构最简单的。一个单链表的结点(Node)分为两个部分，第一个部分保存data，另一个部分存储下一个节点的地址。最后一个节点存储地址的部分指向空值。




1.数组：在内存中需要连续空间。
  链表：在内存中可以是不连续的空间。

2.数组内的数据可随机访问.但链表不具备随机访问性.数组在内存里是连续的空间.链表在内存地址可能是分散的.所以必须通过上一节点中的信息找能找到下一个节点. 
  数组查找速度更快，内存地址的连续性

3.数组优缺点：
优点：使用方便 ，查询效率 比链表高，内存为一连续的区域
缺点：大小固定，不适合动态存储，不方便动态添加

4.插入与删除的操作快.如果数组的中间插入一个元素,那么这个元素后的所有元素的内存地址都要往后移动.删除的话同理.只有对数组的最后一个元素进行插入删除操作时,才比较快.链表只需要更改有必要更改的节点内的节点信息就够了.并不需要更改节点的内存地址. 
  内存地址的利用率高.不管你内存里还有多少空间,如果没办法一次性给出数组所需要的空间,那就会提示内存不足,磁盘空间整理的原因之一在这里.而链表可以是分散的空间地址. 
  链表的扩展性比数组好.因为一个数组建立后所占用的空间大小就是固定的.如果满了就没法扩展.只能新建一个更大空间的数组.而链表不是固定的,可以很方便的扩展.

5.链表优缺点
优点：可动态添加删除 大小可变
缺点：只能通过顺次指针访问，查询效率低




1.数组是一种通用的数据结构，能用来实现栈、队列等很多数据结构。数组作为数据存储结构有一定的缺陷。在无序数组中，搜索性能差，在有序数组中，插入效率又很低，而且这两种数组的删除效率都很低，并且数组在创建后，其大小是固定了，设置的过大会造成内存的浪费，过小又不能满足数据量的存储。

2.链表也也可以用来作为实现栈、队列等数据结构的基础，基本上除非需要频繁的通过下标来随机访问各个数据，否则很多使用数组的地方都可以用链表来代替。
   链表是不能解决数据存储的所有问题的，它也有它的优点和缺点。
   
3.链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。
   链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（"links"）

4.使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。

5.单向链表只可向一个方向遍历，一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。而插入一个节点，对于单向链表，我们只提供在链表头插入，只需要将当前插入的节点设置为头节点，next指向原头节点即可。删除一个节点，我们将该节点的上一个节点的next指向该节点的下一个节点。




1.在有序链表中插入和删除某一项最多需要O(N)次比较，平均需要O(N/2)次，因为必须沿着链表上一步一步走才能找到正确的插入位置，然而可以最快速度删除最值，因为只需要删除表头即可，如果一个应用需要频繁的存取最小值，且不需要快速的插入，那么有序链表是一个比较好的选择方案。比如优先级队列可以使用有序链表来实现。




1.使用内部类的最大好处是可以和外部类进行私有操作的互相访问。
注：内部类访问的特点是：**内部类可以直接访问外部类的成员，包括私有；外部类要访问内部类的成员，必须先创建对象。**




抽象数据类型（ADT）
　　一个数据类型会涉及到两件事：
　　①、拥有特定特征的数据项
　　②、在数据上允许的操作：数据类型允许的操作是它本身不可分离的部分，理解类型包括理解什么样的操作可以应用在该类型上。

　  设计计算机语言的人，为什么会考虑到数据类型？
   计算1+1不需要开辟很大的存储空间，不需要适合小数甚至字符运算的内存空间。于是计算机的研究者就考虑要对数据进行分类，分出来多种数据类型。比如int，float。
　  高级语言编写者的目的就是为了实现整形数字的运算，比如a+b等。不关心整数在计算机内部是如何表示的，也不管CPU是如何计算的。无论什么计算机、什么语言都会面临类似的整数运算，可以考虑将其抽象出来。抽象是抽取出事物具有的普遍性本质，是对事物的一个概括，是一种思考问题的方式。

　　抽象数据类型（ADT）是指一个数学模型及定义在该模型上的一组操作。它仅取决于其逻辑特征，而与计算机内部如何表示和实现无关。比如整型，各个计算机都有“整型”类型，也需要整形运算，那么整型其实就是一个抽象数据类型。 　

　　比如栈，对于使用者只需要知道pop()和push()方法或其它方法的存在以及如何使用即可，使用者不需要知道是使用的数组或是链表来实现的。

　　ADT的思想可以作为设计工具的理念，比如需要存储数据，那么就从考虑需要在数据上实现的操作开始，需要存取最后一个数据项吗？还是第一个？还是特定值的项？还是特定位置的项？回答这些问题会引出ADT的定义，只有完整的定义了ADT后，才应该考虑实现的细节。

　　这在Java语言中的接口设计理念是想通的。